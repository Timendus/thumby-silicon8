# Silicon8 for Thumby
# By Timendus

# This is a (crappy start at a) CHIP-8 interpreter

import time
import gc
import random
import thumby
import machine
from framebuf import FrameBuffer, MONO_VLSB

gc.enable()
# machine.freq(125000000)

splash = (
    0,0,0,0,0,0,0,224,248,60,14,14,7,7,3,3,7,7,14,14,12,0,0,0,0,0,32,32,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,240,120,28,14,6,6,6,14,28,120,240,224,0,
    0,0,0,0,0,0,0,15,31,56,112,96,96,224,192,192,192,128,128,0,0,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,15,30,184,240,224,224,224,240,184,30,15,7,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,15,254,248,0,0,196,64,0,0,255,0,0,196,64,0,0,0,128,64,64,64,0,0,0,128,64,64,128,0,0,0,192,64,64,64,128,0,0,0,252,254,15,3,1,0,0,0,1,3,15,254,252,0,
    0,48,112,112,224,224,192,192,192,192,192,192,192,192,224,96,112,56,28,15,7,1,0,0,63,0,0,0,63,0,0,63,0,0,0,15,16,32,32,32,0,0,15,16,32,32,16,15,0,0,63,0,0,0,0,63,0,0,3,7,15,28,56,48,48,48,56,28,15,7,3,0,
    0,60,66,66,66,0,124,16,16,124,0,122,0,124,20,20,8,0,40,84,84,40,0,0,0,66,126,66,0,124,4,4,120,0,62,68,0,56,84,84,88,0,124,8,4,0,124,20,20,8,0,124,8,4,0,56,84,84,88,0,62,68,0,56,84,84,88,0,124,8,4,0
)

# Stop sound and show splash while we wait ;)
thumby.audio.stop()
thumby.display.blit(splash, 0, 0, 72, 40)
thumby.display.update()

AUTO   = 0
VIP    = 1
SCHIP  = 2
XOCHIP = 3

keymap = {}

# The catalog of ROMs to play with

programs = (
    {
        "name": "Space invaders",
        "type": SCHIP,
        "keys": {
            "up": 5,
            "left": 4,
            "right": 6,
            "a": 5,
            "b": 5
        },
        "rom": (
            0x12, 0x25, 0x53, 0x50, 0x41, 0x43, 0x45, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x44, 0x45, 0x52, 0x53, 0x20, 0x30, 0x2e, 0x39, 0x31, 0x20, 0x42, 0x79, 0x20, 0x44, 0x61, 0x76, 0x69, 0x64,
            0x20, 0x57, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x60, 0x00, 0x61, 0x00, 0x62, 0x08, 0xa3, 0xdd, 0xd0, 0x18, 0x71, 0x08, 0xf2, 0x1e, 0x31, 0x20, 0x12, 0x2d, 0x70, 0x08, 0x61, 0x00, 0x30,
            0x40, 0x12, 0x2d, 0x69, 0x05, 0x6c, 0x15, 0x6e, 0x00, 0x23, 0x91, 0x60, 0x0a, 0xf0, 0x15, 0xf0, 0x07, 0x30, 0x00, 0x12, 0x4b, 0x23, 0x91, 0x7e, 0x01, 0x12, 0x45, 0x66, 0x00, 0x68,
            0x1c, 0x69, 0x00, 0x6a, 0x04, 0x6b, 0x0a, 0x6c, 0x04, 0x6d, 0x3c, 0x6e, 0x0f, 0x00, 0xe0, 0x23, 0x75, 0x23, 0x51, 0xfd, 0x15, 0x60, 0x04, 0xe0, 0x9e, 0x12, 0x7d, 0x23, 0x75, 0x38,
            0x00, 0x78, 0xff, 0x23, 0x75, 0x60, 0x06, 0xe0, 0x9e, 0x12, 0x8b, 0x23, 0x75, 0x38, 0x39, 0x78, 0x01, 0x23, 0x75, 0x36, 0x00, 0x12, 0x9f, 0x60, 0x05, 0xe0, 0x9e, 0x12, 0xe9, 0x66,
            0x01, 0x65, 0x1b, 0x84, 0x80, 0xa3, 0xd9, 0xd4, 0x51, 0xa3, 0xd9, 0xd4, 0x51, 0x75, 0xff, 0x35, 0xff, 0x12, 0xad, 0x66, 0x00, 0x12, 0xe9, 0xd4, 0x51, 0x3f, 0x01, 0x12, 0xe9, 0xd4,
            0x51, 0x66, 0x00, 0x83, 0x40, 0x73, 0x03, 0x83, 0xb5, 0x62, 0xf8, 0x83, 0x22, 0x62, 0x08, 0x33, 0x00, 0x12, 0xc9, 0x23, 0x7d, 0x82, 0x06, 0x43, 0x08, 0x12, 0xd3, 0x33, 0x10, 0x12,
            0xd5, 0x23, 0x7d, 0x82, 0x06, 0x33, 0x18, 0x12, 0xdd, 0x23, 0x7d, 0x82, 0x06, 0x43, 0x20, 0x12, 0xe7, 0x33, 0x28, 0x12, 0xe9, 0x23, 0x7d, 0x3e, 0x00, 0x13, 0x07, 0x79, 0x06, 0x49,
            0x18, 0x69, 0x00, 0x6a, 0x04, 0x6b, 0x0a, 0x6c, 0x04, 0x7d, 0xf4, 0x6e, 0x0f, 0x00, 0xe0, 0x23, 0x51, 0x23, 0x75, 0xfd, 0x15, 0x12, 0x6f, 0xf7, 0x07, 0x37, 0x00, 0x12, 0x6f, 0xfd,
            0x15, 0x23, 0x51, 0x8b, 0xa4, 0x3b, 0x12, 0x13, 0x1b, 0x7c, 0x02, 0x6a, 0xfc, 0x3b, 0x02, 0x13, 0x23, 0x7c, 0x02, 0x6a, 0x04, 0x23, 0x51, 0x3c, 0x18, 0x12, 0x6f, 0x00, 0xe0, 0xa4,
            0xdd, 0x60, 0x14, 0x61, 0x08, 0x62, 0x0f, 0xd0, 0x1f, 0x70, 0x08, 0xf2, 0x1e, 0x30, 0x2c, 0x13, 0x33, 0x60, 0xff, 0xf0, 0x15, 0xf0, 0x07, 0x30, 0x00, 0x13, 0x41, 0xf0, 0x0a, 0x00,
            0xe0, 0xa7, 0x06, 0xfe, 0x65, 0x12, 0x25, 0xa3, 0xc1, 0xf9, 0x1e, 0x61, 0x08, 0x23, 0x69, 0x81, 0x06, 0x23, 0x69, 0x81, 0x06, 0x23, 0x69, 0x81, 0x06, 0x23, 0x69, 0x7b, 0xd0, 0x00,
            0xee, 0x80, 0xe0, 0x80, 0x12, 0x30, 0x00, 0xdb, 0xc6, 0x7b, 0x0c, 0x00, 0xee, 0xa3, 0xd9, 0x60, 0x1c, 0xd8, 0x04, 0x00, 0xee, 0x23, 0x51, 0x8e, 0x23, 0x23, 0x51, 0x60, 0x05, 0xf0,
            0x18, 0xf0, 0x15, 0xf0, 0x07, 0x30, 0x00, 0x13, 0x89, 0x00, 0xee, 0x6a, 0x00, 0x8d, 0xe0, 0x6b, 0x04, 0xe9, 0xa1, 0x12, 0x57, 0xa6, 0x0c, 0xfd, 0x1e, 0xf0, 0x65, 0x30, 0xff, 0x13,
            0xaf, 0x6a, 0x00, 0x6b, 0x04, 0x6d, 0x01, 0x6e, 0x01, 0x13, 0x97, 0xa5, 0x0a, 0xf0, 0x1e, 0xdb, 0xc6, 0x7b, 0x08, 0x7d, 0x01, 0x7a, 0x01, 0x3a, 0x07, 0x13, 0x97, 0x00, 0xee, 0x3c,
            0x7e, 0xff, 0xff, 0x99, 0x99, 0x7e, 0xff, 0xff, 0x24, 0x24, 0xe7, 0x7e, 0xff, 0x3c, 0x3c, 0x7e, 0xdb, 0x81, 0x42, 0x3c, 0x7e, 0xff, 0xdb, 0x10, 0x38, 0x7c, 0xfe, 0x00, 0x00, 0x7f,
            0x00, 0x3f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x3f, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x3f, 0x08, 0x08, 0xff, 0x00,
            0x00, 0xfe, 0x00, 0xfc, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x7e, 0x42, 0x42, 0x62, 0x62, 0x62, 0x62, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00,
            0xff, 0x00, 0x7d, 0x00, 0x41, 0x7d, 0x05, 0x7d, 0x7d, 0x00, 0x00, 0xc2, 0xc2, 0xc6, 0x44, 0x6c, 0x28, 0x38, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
            0x00, 0x00, 0xff, 0x00, 0xf7, 0x10, 0x14, 0xf7, 0xf7, 0x04, 0x04, 0x00, 0x00, 0x7c, 0x44, 0xfe, 0xc2, 0xc2, 0xc2, 0xc2, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xef, 0x20, 0x28, 0xe8, 0xe8, 0x2f, 0x2f, 0x00, 0x00, 0xf9, 0x85, 0xc5, 0xc5, 0xc5, 0xc5, 0xf9, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xbe, 0x00, 0x20, 0x30, 0x20, 0xbe, 0xbe, 0x00, 0x00, 0xf7, 0x04, 0xe7, 0x85, 0x85, 0x84, 0xf4, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x00, 0x3f, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xef, 0x28, 0xef, 0x00, 0xe0, 0x60, 0x6f, 0x00, 0x00, 0xff, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0xfe, 0x00, 0xfc, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xc0, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00,
            0xfc, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0xfc, 0x10, 0x10, 0xff, 0xf9, 0x81, 0xb9, 0x8b, 0x9a, 0x9a, 0xfa, 0x00, 0xfa, 0x8a, 0x9a, 0x9a, 0x9b, 0x99, 0xf8, 0xe6, 0x25,
            0x25, 0xf4, 0x34, 0x34, 0x34, 0x00, 0x17, 0x14, 0x34, 0x37, 0x36, 0x26, 0xc7, 0xdf, 0x50, 0x50, 0x5c, 0xd8, 0xd8, 0xdf, 0x00, 0xdf, 0x11, 0x1f, 0x12, 0x1b, 0x19, 0xd9, 0x7c, 0x44,
            0xfe, 0x86, 0x86, 0x86, 0xfc, 0x84, 0xfe, 0x82, 0x82, 0xfe, 0xfe, 0x80, 0xc0, 0xc0, 0xc0, 0xfe, 0xfc, 0x82, 0xc2, 0xc2, 0xc2, 0xfc, 0xfe, 0x80, 0xf8, 0xc0, 0xc0, 0xfe, 0xfe, 0x80,
            0xf0, 0xc0, 0xc0, 0xc0, 0xfe, 0x80, 0xbe, 0x86, 0x86, 0xfe, 0x86, 0x86, 0xfe, 0x86, 0x86, 0x86, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x18, 0x18, 0x18, 0x48, 0x48, 0x78, 0x9c, 0x90,
            0xb0, 0xc0, 0xb0, 0x9c, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xfe, 0xee, 0x92, 0x92, 0x86, 0x86, 0x86, 0xfe, 0x82, 0x86, 0x86, 0x86, 0x86, 0x7c, 0x82, 0x86, 0x86, 0x86, 0x7c, 0xfe, 0x82,
            0xfe, 0xc0, 0xc0, 0xc0, 0x7c, 0x82, 0xc2, 0xca, 0xc4, 0x7a, 0xfe, 0x86, 0xfe, 0x90, 0x9c, 0x84, 0xfe, 0xc0, 0xfe, 0x02, 0x02, 0xfe, 0xfe, 0x10, 0x30, 0x30, 0x30, 0x30, 0x82, 0x82,
            0xc2, 0xc2, 0xc2, 0xfe, 0x82, 0x82, 0x82, 0xee, 0x38, 0x10, 0x86, 0x86, 0x96, 0x92, 0x92, 0xee, 0x82, 0x44, 0x38, 0x38, 0x44, 0x82, 0x82, 0x82, 0xfe, 0x30, 0x30, 0x30, 0xfe, 0x02,
            0x1e, 0xf0, 0x80, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x00, 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x7c, 0xc6,
            0x0c, 0x18, 0x00, 0x18, 0x00, 0x00, 0xfe, 0xfe, 0x00, 0x00, 0xfe, 0x82, 0x86, 0x86, 0x86, 0xfe, 0x08, 0x08, 0x08, 0x18, 0x18, 0x18, 0xfe, 0x02, 0xfe, 0xc0, 0xc0, 0xfe, 0xfe, 0x02,
            0x1e, 0x06, 0x06, 0xfe, 0x84, 0xc4, 0xc4, 0xfe, 0x04, 0x04, 0xfe, 0x80, 0xfe, 0x06, 0x06, 0xfe, 0xc0, 0xc0, 0xc0, 0xfe, 0x82, 0xfe, 0xfe, 0x02, 0x02, 0x06, 0x06, 0x06, 0x7c, 0x44,
            0xfe, 0x86, 0x86, 0xfe, 0xfe, 0x82, 0xfe, 0x06, 0x06, 0x06, 0x44, 0xfe, 0x44, 0x44, 0xfe, 0x44, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x6c, 0x5a, 0x00, 0x0c, 0x18, 0xa8, 0x30,
            0x4e, 0x7e, 0x00, 0x12, 0x18, 0x66, 0x6c, 0xa8, 0x5a, 0x66, 0x54, 0x24, 0x66, 0x00, 0x48, 0x48, 0x18, 0x12, 0xa8, 0x06, 0x90, 0xa8, 0x12, 0x00, 0x7e, 0x30, 0x12, 0xa8, 0x84, 0x30,
            0x4e, 0x72, 0x18, 0x66, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x90, 0x54, 0x78, 0xa8, 0x48, 0x78, 0x6c, 0x72, 0xa8, 0x12, 0x18, 0x6c, 0x72, 0x66, 0x54, 0x90, 0xa8, 0x72, 0x2a, 0x18,
            0xa8, 0x30, 0x4e, 0x7e, 0x00, 0x12, 0x18, 0x66, 0x6c, 0xa8, 0x72, 0x54, 0xa8, 0x5a, 0x66, 0x18, 0x7e, 0x18, 0x4e, 0x72, 0xa8, 0x72, 0x2a, 0x18, 0x30, 0x66, 0xa8, 0x30, 0x4e, 0x7e,
            0x00, 0x6c, 0x30, 0x54, 0x4e, 0x9c, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0x48, 0x54, 0x7e, 0x18, 0xa8, 0x90, 0x54, 0x78, 0x66, 0xa8, 0x6c, 0x2a, 0x30, 0x5a, 0xa8, 0x84, 0x30,
            0x72, 0x2a, 0xa8, 0xd8, 0xa8, 0x00, 0x4e, 0x12, 0xa8, 0xe4, 0xa2, 0xa8, 0x00, 0x4e, 0x12, 0xa8, 0x6c, 0x2a, 0x54, 0x54, 0x72, 0xa8, 0x84, 0x30, 0x72, 0x2a, 0xa8, 0xde, 0x9c, 0xa8,
            0x72, 0x2a, 0x18, 0xa8, 0x0c, 0x54, 0x48, 0x5a, 0x78, 0x72, 0x18, 0x66, 0xa8, 0x66, 0x18, 0x5a, 0x54, 0x66, 0x72, 0x6c, 0xa8, 0x72, 0x2a, 0x00, 0x72, 0xa8, 0x72, 0x2a, 0x18, 0xa8,
            0x30, 0x4e, 0x7e, 0x00, 0x12, 0x18, 0x66, 0x6c, 0xa8, 0x00, 0x66, 0x18, 0xa8, 0x30, 0x4e, 0x0c, 0x66, 0x18, 0x00, 0x6c, 0x30, 0x4e, 0x24, 0xa8, 0x72, 0x2a, 0x18, 0x30, 0x66, 0xa8,
            0x1e, 0x54, 0x66, 0x0c, 0x18, 0x9c, 0xa8, 0x24, 0x54, 0x54, 0x12, 0xa8, 0x42, 0x78, 0x0c, 0x3c, 0xa8, 0xae, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xa8, 0xff, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        )
    },
    {
        "name": "3D VIP'r Maze",
        "type": VIP,
        "keys": {
            "up": 5,
            "down": 8,
            "left": 7,
            "right": 9
        },
        "rom": (
            0x00, 0xe0, 0xad, 0x25, 0xf0, 0x65, 0x70, 0x01, 0xad, 0x25, 0xf0, 0x55, 0xf0, 0x29, 0x60, 0x1e, 0x61, 0x0a, 0xd0, 0x15, 0x24, 0xf6, 0x00, 0xe0, 0x23, 0x9c, 0x6d, 0x00, 0x6e, 0x00,
            0x24, 0x58, 0x4d, 0x01, 0x12, 0x00, 0x4e, 0x01, 0x12, 0x16, 0x12, 0x1e, 0x6d, 0x00, 0x6e, 0x00, 0xa3, 0x32, 0xf1, 0x55, 0xa2, 0x3a, 0x62, 0xa0, 0x80, 0x21, 0xf1, 0x55, 0x00, 0x00,
            0xfd, 0x1e, 0xf0, 0x65, 0x6f, 0x7f, 0x8c, 0x00, 0x8c, 0xf2, 0x6f, 0x80, 0x8b, 0x00, 0x8b, 0xf2, 0x4b, 0x00, 0x12, 0x8a, 0x8d, 0xc4, 0x7d, 0x01, 0x80, 0xc0, 0x70, 0xff, 0x80, 0x0e,
            0x80, 0x0e, 0xb2, 0x5e, 0xf0, 0x65, 0x12, 0xb2, 0xf1, 0x65, 0x12, 0xb2, 0xf2, 0x65, 0x12, 0xb2, 0xf3, 0x65, 0x12, 0xb2, 0xf4, 0x65, 0x12, 0xb2, 0xf5, 0x65, 0x12, 0xb2, 0xf6, 0x65,
            0x12, 0xb2, 0xf7, 0x65, 0x12, 0xb2, 0xf8, 0x65, 0x12, 0xb2, 0xf9, 0x65, 0x12, 0xb2, 0xfa, 0x65, 0x12, 0xb2, 0x7d, 0x02, 0xf0, 0x65, 0x81, 0x00, 0x60, 0x0b, 0x80, 0xc5, 0x80, 0x0e,
            0x8f, 0x10, 0xb2, 0x9a, 0x8a, 0xf0, 0x89, 0xf0, 0x88, 0xf0, 0x87, 0xf0, 0x86, 0xf0, 0x85, 0xf0, 0x84, 0xf0, 0x83, 0xf0, 0x82, 0xf0, 0x81, 0xf0, 0x80, 0xf0, 0x12, 0xb2, 0xa3, 0x14,
            0xfe, 0x1e, 0x8e, 0xc4, 0x8f, 0x00, 0x80, 0xc0, 0x8c, 0xf0, 0x70, 0xff, 0x8b, 0x00, 0x80, 0x0e, 0x80, 0xb4, 0x80, 0x0e, 0xb2, 0xca, 0x80, 0xc0, 0xf0, 0x55, 0x13, 0x0a, 0x80, 0xc0,
            0xf1, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xf2, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xf3, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xf4, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xf5, 0x55, 0x13, 0x0a, 0x80, 0xc0,
            0xf6, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xf7, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xf8, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xf9, 0x55, 0x13, 0x0a, 0x80, 0xc0, 0xfa, 0x55, 0x4e, 0x1e, 0x00, 0xee,
            0xa3, 0x32, 0xf1, 0x65, 0x12, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xad, 0x22, 0xf2, 0x65, 0x42, 0x00, 0x13, 0x54, 0x42, 0x01, 0x13, 0x4c, 0x42, 0x02, 0x13, 0x5c, 0x80, 0x45, 0x71, 0x01, 0x81, 0x35,
            0x13, 0x62, 0x80, 0x44, 0x71, 0xff, 0x81, 0x34, 0x13, 0x62, 0x70, 0xff, 0x80, 0x34, 0x81, 0x45, 0x13, 0x62, 0x70, 0x01, 0x80, 0x35, 0x81, 0x44, 0xac, 0x92, 0xf0, 0x1e, 0x81, 0x1e,
            0x81, 0x1e, 0x81, 0x1e, 0x81, 0x1e, 0xf1, 0x1e, 0xf0, 0x65, 0x00, 0xee, 0xac, 0x92, 0xfa, 0x1e, 0x80, 0xb0, 0x80, 0x0e, 0x80, 0x0e, 0x80, 0x0e, 0x80, 0x0e, 0xf0, 0x1e, 0xf0, 0x65,
            0x00, 0xee, 0xac, 0x92, 0xfa, 0x1e, 0x81, 0xb0, 0x81, 0x1e, 0x81, 0x1e, 0x81, 0x1e, 0x81, 0x1e, 0xf1, 0x1e, 0xf0, 0x55, 0x00, 0xee, 0x6a, 0x00, 0x6b, 0x00, 0xad, 0x86, 0x24, 0x1a,
            0x22, 0x2a, 0x63, 0x18, 0x24, 0x0a, 0x6a, 0x5c, 0x6b, 0x02, 0xad, 0x86, 0x24, 0x1a, 0x22, 0x2a, 0x63, 0x20, 0x24, 0x0a, 0x6a, 0x00, 0x6b, 0x00, 0xad, 0x62, 0x24, 0x1a, 0x22, 0x2a,
            0x63, 0x10, 0x24, 0x0a, 0x6a, 0x5c, 0x6b, 0x02, 0xad, 0x62, 0x24, 0x1a, 0x22, 0x2a, 0x63, 0x28, 0x24, 0x0a, 0x6a, 0x00, 0x6b, 0x00, 0xad, 0x50, 0x24, 0x1a, 0x22, 0x2a, 0x63, 0x08,
            0x24, 0x0a, 0x6a, 0x5c, 0x6b, 0x02, 0xad, 0x50, 0x24, 0x1a, 0x22, 0x2a, 0x63, 0x30, 0x24, 0x0a, 0x6a, 0x00, 0x6b, 0x00, 0xad, 0x26, 0x24, 0x1a, 0x22, 0x2a, 0x63, 0x00, 0x24, 0x0a,
            0x6a, 0x5c, 0x6b, 0x02, 0xad, 0x26, 0x24, 0x1a, 0x22, 0x2a, 0x63, 0x38, 0xa3, 0x14, 0x62, 0x0f, 0x61, 0x01, 0xd3, 0x1f, 0xf2, 0x1e, 0x61, 0x10, 0xd3, 0x1f, 0x00, 0xee, 0xf2, 0x65,
            0x85, 0x10, 0x86, 0x20, 0x83, 0x00, 0x84, 0x00, 0x61, 0x0f, 0x84, 0x12, 0x83, 0x36, 0x83, 0x36, 0x83, 0x36, 0x83, 0x36, 0x43, 0x00, 0x83, 0xb4, 0x23, 0x34, 0x81, 0x50, 0x40, 0x01,
            0x81, 0x60, 0x82, 0x10, 0x82, 0x2e, 0x4f, 0x01, 0x14, 0x4e, 0xad, 0x26, 0xf1, 0x1e, 0xf1, 0x1e, 0xf1, 0x1e, 0x14, 0x1a, 0xad, 0xc2, 0xf2, 0x1e, 0xfa, 0x1e, 0xf1, 0x65, 0x00, 0xee,
            0xad, 0x22, 0xf2, 0x65, 0x63, 0x07, 0xe3, 0xa1, 0x14, 0xa0, 0x63, 0x09, 0xe3, 0xa1, 0x14, 0xa4, 0x63, 0x05, 0x64, 0x08, 0x42, 0x00, 0x14, 0x82, 0x42, 0x01, 0x14, 0x8c, 0x42, 0x02,
            0x14, 0x96, 0xe3, 0xa1, 0x14, 0xba, 0xe4, 0xa1, 0x14, 0xb2, 0x00, 0xee, 0xe3, 0xa1, 0x14, 0xc2, 0xe4, 0xa1, 0x14, 0xca, 0x00, 0xee, 0xe3, 0xa1, 0x14, 0xb2, 0xe4, 0xa1, 0x14, 0xba,
            0x00, 0xee, 0xe3, 0xa1, 0x14, 0xca, 0xe4, 0xa1, 0x14, 0xc2, 0x00, 0xee, 0x72, 0xff, 0x14, 0xa6, 0x72, 0x01, 0x60, 0x03, 0x80, 0x22, 0xad, 0x24, 0xf0, 0x55, 0x6e, 0x01, 0x14, 0xe8,
            0x62, 0x0f, 0x70, 0x01, 0x80, 0x22, 0x14, 0xd0, 0x62, 0x0f, 0x70, 0xff, 0x80, 0x22, 0x14, 0xd0, 0x62, 0x07, 0x71, 0xff, 0x81, 0x22, 0x14, 0xd0, 0x62, 0x07, 0x71, 0x01, 0x81, 0x22,
            0x84, 0x00, 0x85, 0x10, 0x23, 0x62, 0x40, 0x01, 0x14, 0xe8, 0x40, 0x07, 0x6d, 0x01, 0x80, 0x40, 0x81, 0x50, 0xad, 0x22, 0xf1, 0x55, 0x6e, 0x01, 0x6a, 0x00, 0xea, 0xa1, 0x14, 0xea,
            0x7a, 0x01, 0x3a, 0x10, 0x14, 0xea, 0x00, 0xee, 0xac, 0x92, 0x61, 0x00, 0x60, 0x01, 0xf0, 0x55, 0x71, 0x01, 0x6f, 0x80, 0x8f, 0x17, 0x4f, 0x00, 0x14, 0xfc, 0x60, 0x07, 0x26, 0x02,
            0x8a, 0x00, 0x8a, 0xae, 0x7a, 0x01, 0x60, 0x03, 0x26, 0x02, 0x8b, 0x00, 0x8b, 0xbe, 0x7b, 0x01, 0x60, 0x04, 0x26, 0x02, 0x82, 0x00, 0x80, 0xa0, 0x81, 0xb0, 0xad, 0x22, 0xf2, 0x55,
            0x6d, 0x00, 0x6c, 0x00, 0x60, 0x00, 0x23, 0x88, 0x6f, 0x02, 0x8f, 0xb5, 0x3f, 0x00, 0x15, 0x4a, 0x7b, 0xfe, 0x23, 0x74, 0x30, 0x01, 0x15, 0x48, 0x60, 0x12, 0x23, 0x88, 0x7c, 0x01,
            0x7b, 0x02, 0x6f, 0x02, 0x8f, 0xa5, 0x3f, 0x00, 0x15, 0x62, 0x7a, 0xfe, 0x23, 0x74, 0x30, 0x01, 0x15, 0x60, 0x60, 0x13, 0x23, 0x88, 0x7c, 0x01, 0x7a, 0x02, 0x6f, 0x0d, 0x8f, 0xa7,
            0x3f, 0x00, 0x15, 0x7a, 0x7a, 0x02, 0x23, 0x74, 0x30, 0x01, 0x15, 0x78, 0x60, 0x14, 0x23, 0x88, 0x7c, 0x01, 0x7a, 0xfe, 0x6f, 0x06, 0x8f, 0xb7, 0x3f, 0x00, 0x15, 0x92, 0x7b, 0x02,
            0x23, 0x74, 0x30, 0x01, 0x15, 0x90, 0x60, 0x15, 0x23, 0x88, 0x7c, 0x01, 0x7b, 0xfe, 0x3c, 0x00, 0x15, 0x9c, 0x60, 0x07, 0x23, 0x88, 0x00, 0xee, 0x7d, 0x01, 0x60, 0x00, 0xf0, 0x29,
            0x80, 0xd0, 0x80, 0x0e, 0x70, 0x02, 0x61, 0x14, 0xd0, 0x15, 0x80, 0xc0, 0x26, 0x02, 0x84, 0x00, 0x6a, 0x01, 0x6b, 0x01, 0x62, 0x10, 0x23, 0x74, 0x83, 0x00, 0x80, 0x22, 0x40, 0x00,
            0x15, 0xf6, 0x34, 0x00, 0x15, 0xf4, 0x7c, 0xff, 0x60, 0x00, 0x33, 0x12, 0x15, 0xd4, 0x7b, 0x01, 0x23, 0x88, 0x7b, 0xff, 0x33, 0x13, 0x15, 0xde, 0x7a, 0x01, 0x23, 0x88, 0x7a, 0xff,
            0x33, 0x14, 0x15, 0xe8, 0x7a, 0xff, 0x23, 0x88, 0x7a, 0x01, 0x33, 0x15, 0x15, 0xf2, 0x7b, 0xff, 0x23, 0x88, 0x7b, 0x01, 0x15, 0x2e, 0x74, 0xff, 0x7a, 0x01, 0x3a, 0x10, 0x16, 0x00,
            0x6a, 0x00, 0x7b, 0x01, 0x15, 0xb8, 0x62, 0x00, 0x83, 0x00, 0x83, 0x36, 0x82, 0x2e, 0x72, 0x01, 0x33, 0x00, 0x16, 0x06, 0xc1, 0xff, 0x81, 0x22, 0x8f, 0x00, 0x8f, 0x17, 0x3f, 0x00,
            0x16, 0x20, 0x80, 0x10, 0x00, 0xee, 0x16, 0x10, 0x8b, 0x0f, 0xc3, 0xe0, 0xf4, 0x26, 0x07, 0x83, 0xe0, 0xf2, 0xf3, 0x7b, 0x8b, 0x03, 0xc0, 0xe6, 0xf7, 0xe7, 0xe6, 0xc0, 0x03, 0x7b,
            0xf3, 0xf0, 0x88, 0xe0, 0xc3, 0x07, 0x76, 0xe0, 0xe0, 0xc3, 0x0f, 0x8b, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x43, 0x60, 0x6a, 0x0b, 0x00, 0xa6, 0x8b, 0x36, 0x14, 0x40, 0x6b, 0x69, 0x40,
            0x04, 0xa6, 0xb4, 0x21, 0x0a, 0x88, 0x68, 0x48, 0x43, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0x07, 0xff, 0x8b, 0x3f, 0x0f, 0x63, 0x28, 0x85, 0xb0, 0x15, 0x0c, 0x62, 0x0b, 0xa8, 0x85, 0x81,
            0x28, 0x63, 0x0f, 0x3f, 0x07, 0xff, 0x0b, 0xff, 0x88, 0x3f, 0x4f, 0x53, 0x88, 0x50, 0x23, 0x4f, 0x3f, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0xfc, 0xf2, 0xca, 0x09, 0x12, 0xc4, 0xf2, 0xfc,
            0x0b, 0xff, 0x07, 0xff, 0x8b, 0xfc, 0xf0, 0xc6, 0x14, 0xa1, 0x0d, 0xa8, 0x30, 0x46, 0xd0, 0x15, 0x85, 0x81, 0x14, 0xc6, 0xf0, 0xfc, 0x07, 0xff, 0x8b, 0xff, 0xff, 0xff, 0xfc, 0xf0,
            0xc2, 0x06, 0x56, 0xd0, 0x00, 0x65, 0x8b, 0x6c, 0x28, 0x02, 0xd6, 0x96, 0x02, 0x20, 0x65, 0x2d, 0x84, 0x50, 0x88, 0x16, 0x12, 0xc2, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0x8b, 0xf0, 0xc3,
            0x07, 0x2f, 0x64, 0xe0, 0xc1, 0x07, 0x4f, 0xcf, 0xde, 0x8b, 0xc0, 0x03, 0x67, 0xef, 0xe7, 0x67, 0x03, 0xc0, 0xde, 0xcf, 0x0f, 0x88, 0x07, 0xc3, 0xe0, 0x6e, 0x07, 0x07, 0xc3, 0xf0,
            0x8b, 0xff, 0xff, 0x00, 0x00, 0x26, 0x6f, 0x47, 0x00, 0x20, 0x73, 0xf3, 0x8b, 0x66, 0x00, 0x26, 0x6f, 0xef, 0x22, 0x00, 0xe1, 0xf7, 0x73, 0x10, 0x88, 0x00, 0xee, 0xe7, 0x22, 0x00,
            0x00, 0xff, 0xff, 0x8b, 0xff, 0xff, 0x00, 0x44, 0xe6, 0xf6, 0xe2, 0x00, 0x04, 0xce, 0xcf, 0x8b, 0x66, 0x00, 0x64, 0xf6, 0xf7, 0x44, 0x00, 0x87, 0xef, 0xce, 0x08, 0x88, 0x00, 0x77,
            0xe7, 0xe6, 0x44, 0x00, 0xff, 0xff, 0x8b, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x00, 0x36, 0x27, 0x01, 0x18, 0x8b, 0x16, 0x2c, 0x00, 0x0d, 0x5f, 0x06, 0x00, 0x52, 0x64, 0x01, 0x37,
            0x88, 0x0a, 0x00, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x8b, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0x00, 0x6c, 0xe4, 0x80, 0x18, 0x8b, 0x68, 0x34, 0x00, 0xb0, 0xfa, 0x60, 0x00, 0x4a,
            0x26, 0x80, 0xec, 0x88, 0x50, 0x00, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x07, 0xff, 0x8b, 0x7f, 0x7f, 0x03, 0xac, 0xd5, 0x00, 0x65, 0x54, 0x00, 0x29, 0x94, 0x85, 0xc1, 0x34, 0x03,
            0x7f, 0x7f, 0x07, 0xff, 0x07, 0xff, 0x8b, 0xfe, 0xfe, 0xc0, 0x35, 0xab, 0x00, 0xa6, 0x2a, 0x00, 0x94, 0x29, 0x85, 0x83, 0x2c, 0xc0, 0xfe, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x8b, 0x3f,
            0x0f, 0x63, 0x29, 0x84, 0xb1, 0x14, 0x09, 0x60, 0x05, 0xa8, 0x85, 0x84, 0x29, 0x63, 0x0f, 0x3f, 0x07, 0xff, 0x0b, 0xff, 0x88, 0x3f, 0x0f, 0x93, 0x08, 0x90, 0x23, 0x8f, 0x3f, 0x0b,
            0xff, 0x0b, 0xff, 0x88, 0xfc, 0xf1, 0xc8, 0x09, 0x10, 0xc5, 0xf0, 0xfc, 0x0b, 0xff, 0x07, 0xff, 0x8b, 0xfc, 0xf0, 0xc6, 0x94, 0x21, 0x0d, 0xa8, 0x10, 0x86, 0x20, 0x95, 0x85, 0x21,
            0x94, 0xc6, 0xf0, 0xfc, 0x07, 0xff, 0x0b, 0xff, 0x88, 0x3f, 0xbf, 0x03, 0x94, 0x20, 0x03, 0xbf, 0x3f, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0xfc, 0xfd, 0xc0, 0x09, 0x24, 0xc0, 0xfd, 0xfc,
            0x0b, 0xff, 0x8b, 0xff, 0xff, 0x00, 0x06, 0x1f, 0x3f, 0x2e, 0x00, 0x83, 0x8f, 0x9f, 0x8b, 0x87, 0x00, 0x18, 0x3c, 0x7e, 0x0c, 0x00, 0xbf, 0x9f, 0x8f, 0x83, 0x88, 0x00, 0x32, 0x7f,
            0x1e, 0x04, 0x00, 0xff, 0xff, 0x8b, 0xff, 0xff, 0x00, 0x06, 0x1f, 0x3f, 0x7c, 0x00, 0x87, 0xcf, 0xdf, 0x8b, 0x1f, 0x00, 0x3c, 0x7e, 0x7e, 0x3c, 0x00, 0x3f, 0x9f, 0x9f, 0x0e, 0x88,
            0x00, 0x7c, 0x3e, 0x1e, 0x04, 0x00, 0xff, 0xff, 0x8b, 0xff, 0xff, 0x00, 0x06, 0x1e, 0x3f, 0x3e, 0x00, 0x0c, 0x9e, 0xbe, 0x8b, 0x1c, 0x00, 0x79, 0xfb, 0x7b, 0x31, 0x00, 0x1f, 0xbf,
            0x1f, 0x07, 0x88, 0x00, 0xfc, 0x7e, 0x3e, 0x0e, 0x00, 0xff, 0xff, 0x8b, 0xff, 0xff, 0x00, 0x20, 0x78, 0x7c, 0x3e, 0x00, 0x78, 0xfd, 0x7d, 0x8b, 0x7c, 0x00, 0x8c, 0xce, 0xdf, 0xce,
            0x00, 0x1c, 0xbc, 0xb9, 0x20, 0x88, 0x00, 0x7f, 0xfe, 0x7c, 0x70, 0x00, 0xff, 0xff, 0x8b, 0xff, 0xff, 0x00, 0x60, 0xf8, 0xfc, 0x7c, 0x00, 0xe0, 0xf1, 0xf3, 0x8b, 0xd8, 0x00, 0x38,
            0x7e, 0x7c, 0x38, 0x00, 0xcc, 0xf9, 0xf0, 0x60, 0x88, 0x00, 0x3e, 0x7c, 0x7c, 0x30, 0x00, 0xff, 0xff, 0x8b, 0xff, 0xff, 0x00, 0x40, 0xf0, 0xfc, 0x3e, 0x00, 0xc1, 0xf1, 0xf9, 0x8b,
            0xf1, 0x00, 0x38, 0x7e, 0x7c, 0x38, 0x00, 0xc5, 0xf9, 0xf9, 0x71, 0x88, 0x00, 0x4e, 0xfc, 0xf8, 0x60, 0x00, 0xff, 0xff, 0x04, 0xff, 0x8b, 0xfe, 0xfe, 0x00, 0x06, 0xce, 0x01, 0x00,
            0xc6, 0xcf, 0x00, 0x1c, 0x8b, 0x8e, 0x82, 0x00, 0xee, 0x26, 0x01, 0x5c, 0x45, 0x00, 0xfe, 0xfe, 0x04, 0xff, 0x04, 0xff, 0x8b, 0x7f, 0x7f, 0x00, 0x60, 0x73, 0x80, 0x00, 0x63, 0xf3,
            0x00, 0x38, 0x8b, 0x71, 0x41, 0x00, 0x77, 0x64, 0x80, 0x3a, 0xa2, 0x00, 0x7f, 0x7f, 0x04, 0xff, 0x06, 0xff, 0x8b, 0xfe, 0xfe, 0xfe, 0x00, 0x55, 0xea, 0x00, 0xa2, 0x55, 0x00, 0x55,
            0x87, 0x8a, 0x55, 0xae, 0x00, 0xfe, 0xfe, 0xfe, 0x06, 0xff, 0x06, 0xff, 0x8b, 0x7f, 0x7f, 0x7f, 0x00, 0xaa, 0x57, 0x00, 0x45, 0xaa, 0x00, 0xaa, 0x87, 0x51, 0xaa, 0x75, 0x00, 0x7f,
            0x7f, 0x7f, 0x06, 0xff, 0x07, 0xff, 0x04, 0xfe, 0x88, 0x00, 0x55, 0xa2, 0x55, 0xaa, 0x15, 0xaa, 0x01, 0x04, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x04, 0x7f, 0x88, 0x00, 0xaa, 0x45, 0xaa,
            0x55, 0xa8, 0x55, 0x80, 0x04, 0x7f, 0x07, 0xff, 0x0b, 0xff, 0x02, 0xff, 0x84, 0x00, 0xaa, 0x55, 0x00, 0x0b, 0xff, 0x02, 0xff, 0x0b, 0xff, 0x03, 0xff, 0x82, 0x00, 0x00, 0x0b, 0xff,
            0x03, 0xff, 0x83, 0xff, 0xff, 0xff, 0x06, 0x7f, 0x8b, 0x00, 0x56, 0x2a, 0x00, 0x32, 0x49, 0x00, 0x55, 0x0a, 0x60, 0x16, 0x81, 0x00, 0x06, 0x7f, 0x83, 0xff, 0xff, 0xff, 0x83, 0xff,
            0xff, 0xff, 0x06, 0xfe, 0x8b, 0x00, 0x6a, 0x54, 0x00, 0x4c, 0x92, 0x00, 0xaa, 0x50, 0x06, 0x68, 0x81, 0x00, 0x06, 0xfe, 0x83, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x07, 0x7f,
            0x8a, 0x7e, 0x00, 0x54, 0x2a, 0x55, 0x2a, 0x55, 0x2a, 0x00, 0x7e, 0x07, 0x7f, 0x83, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x07, 0xfe, 0x8a, 0x7e, 0x00, 0x2a, 0x54, 0xaa, 0x54,
            0xaa, 0x50, 0x00, 0x7e, 0x07, 0xfe, 0x83, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x07, 0x7f, 0x8a, 0x7e, 0x7e, 0x7e, 0x00, 0x55, 0x2a, 0x00, 0x7e, 0x7e, 0x7e, 0x07, 0x7f, 0x83,
            0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x07, 0xfe, 0x8a, 0x7e, 0x7e, 0x7e, 0x00, 0xaa, 0x54, 0x00, 0x7e, 0x7e, 0x7e, 0x07, 0xfe, 0x83, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff,
            0x07, 0x7f, 0x8b, 0x7e, 0x7e, 0x7e, 0x7f, 0x00, 0x00, 0x7f, 0x7f, 0x7e, 0x7e, 0x7e, 0x06, 0x7f, 0x83, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0x07, 0xfe, 0x8b, 0x7e, 0x7e, 0x7e,
            0xfe, 0x00, 0x00, 0xfe, 0xfe, 0x7e, 0x7e, 0x7e, 0x06, 0xfe, 0x83, 0xff, 0xff, 0xff, 0x06, 0xff, 0x8b, 0x00, 0x08, 0x3d, 0x00, 0x18, 0x79, 0xfb, 0x00, 0x79, 0x3c, 0x0c, 0x87, 0x00,
            0xf3, 0x60, 0x00, 0x39, 0x8c, 0x00, 0x06, 0xff, 0x06, 0xff, 0x8b, 0x00, 0xf9, 0xf3, 0x00, 0x77, 0xf7, 0xf3, 0x00, 0xf9, 0xfb, 0x3b, 0x87, 0x00, 0xde, 0xc3, 0x00, 0xe7, 0x70, 0x00,
            0x06, 0xff, 0x06, 0xff, 0x8b, 0x00, 0xcc, 0xef, 0x00, 0x87, 0xf7, 0xf6, 0x00, 0xef, 0xef, 0x8c, 0x87, 0x00, 0x79, 0x61, 0x00, 0xdf, 0xce, 0x00, 0x06, 0xff, 0x06, 0xff, 0x8b, 0x00,
            0x30, 0x9c, 0x00, 0xc8, 0x9e, 0x1f, 0x00, 0x9e, 0x3c, 0x20, 0x87, 0x00, 0xeb, 0x8c, 0x00, 0x9e, 0x38, 0x00, 0x06, 0xff, 0x07, 0xff, 0x8b, 0x3f, 0x0f, 0x60, 0x22, 0x8d, 0xb0, 0x15,
            0x0a, 0x60, 0x0a, 0xa1, 0x85, 0x82, 0x25, 0x60, 0x0f, 0x3f, 0x07, 0xff, 0x09, 0xff, 0x8b, 0x00, 0x2a, 0x54, 0x00, 0x1d, 0xaa, 0x00, 0xa2, 0x09, 0x54, 0x3a, 0x81, 0x00, 0x09, 0xff,
            0x09, 0xff, 0x8b, 0x00, 0xa2, 0x55, 0x00, 0x51, 0xaa, 0x00, 0x95, 0x28, 0x44, 0xaa, 0x81, 0x00, 0x09, 0xff, 0x07, 0xff, 0x8b, 0xfc, 0xf0, 0x06, 0xa4, 0x71, 0x0d, 0x48, 0xe0, 0x06,
            0x40, 0x95, 0x85, 0x41, 0xa4, 0x06, 0xf0, 0xfc, 0x07, 0xff, 0x07, 0xff, 0x8b, 0x7f, 0x7f, 0x00, 0xa2, 0xdd, 0x00, 0x65, 0x5a, 0x00, 0x2a, 0x91, 0x85, 0xc2, 0x35, 0x00, 0x7f, 0x7f,
            0x07, 0xff, 0x07, 0xff, 0x8b, 0xfe, 0xfe, 0x00, 0xa5, 0x7b, 0x00, 0x46, 0xea, 0x00, 0x44, 0x89, 0x85, 0x43, 0xac, 0x00, 0xfe, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x8b, 0x7f, 0x7f, 0x78,
            0x7a, 0x01, 0x28, 0x51, 0x2a, 0x50, 0x0a, 0x51, 0x85, 0x02, 0x79, 0x78, 0x7f, 0x7f, 0x07, 0xff, 0x07, 0xff, 0x8b, 0xfe, 0xfe, 0x1e, 0x9e, 0x40, 0x0a, 0x50, 0xca, 0x14, 0x4a, 0x94,
            0x85, 0x40, 0x9e, 0x1e, 0xfe, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x8b, 0x7f, 0x7f, 0x78, 0x7a, 0x79, 0x78, 0x01, 0x52, 0x28, 0x02, 0x79, 0x85, 0x7a, 0x79, 0x78, 0x7f, 0x7f, 0x07, 0xff,
            0x07, 0xff, 0x8b, 0xfe, 0xfe, 0x1e, 0x9e, 0x5e, 0x1e, 0x40, 0xca, 0x14, 0x40, 0x9e, 0x85, 0x5e, 0x9e, 0x1e, 0xfe, 0xfe, 0x07, 0xff, 0x07, 0xff, 0x8b, 0x7f, 0x7f, 0x78, 0x7a, 0x79,
            0x78, 0x79, 0x02, 0x00, 0x7a, 0x79, 0x85, 0x7a, 0x79, 0x78, 0x7f, 0x7f, 0x07, 0xff, 0x07, 0xff, 0x8b, 0xfe, 0xfe, 0x1e, 0x9e, 0x5e, 0x1e, 0x5e, 0xc0, 0x00, 0x5e, 0x9e, 0x85, 0x5e,
            0x9e, 0x1e, 0xfe, 0xfe, 0x07, 0xff, 0x0b, 0xff, 0x88, 0x00, 0x55, 0x2a, 0x55, 0xaa, 0x45, 0xaa, 0x00, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0x00, 0x54, 0x8a, 0x55, 0xaa, 0x54, 0xaa, 0x00,
            0x0b, 0xff, 0x07, 0xff, 0x8b, 0x3f, 0x0f, 0x63, 0x29, 0x85, 0xb1, 0x14, 0x0d, 0x60, 0x08, 0xa9, 0x85, 0x81, 0x29, 0x63, 0x0f, 0x3f, 0x07, 0xff, 0x0b, 0xff, 0x88, 0x80, 0x95, 0x2a,
            0x15, 0xaa, 0x05, 0xaa, 0x80, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0x01, 0x55, 0x88, 0x55, 0xa8, 0x54, 0xa9, 0x01, 0x0b, 0xff, 0x07, 0xff, 0x8b, 0xfc, 0xf0, 0xc6, 0x94, 0xa1, 0x8d, 0x28,
            0x30, 0x86, 0x10, 0x95, 0x85, 0x81, 0x94, 0xc6, 0xf0, 0xfc, 0x07, 0xff, 0x07, 0xff, 0x8b, 0x3f, 0x0f, 0x63, 0x29, 0x85, 0xb1, 0x15, 0x0c, 0x60, 0x09, 0xa9, 0x85, 0x81, 0x29, 0x63,
            0x0f, 0x3f, 0x07, 0xff, 0x0b, 0xff, 0x88, 0x80, 0x95, 0xaa, 0x15, 0x2a, 0x85, 0xaa, 0x80, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0x01, 0x55, 0x89, 0x54, 0xa8, 0x55, 0xa9, 0x01, 0x0b, 0xff,
            0x07, 0xff, 0x8b, 0xfc, 0xf0, 0xc6, 0x94, 0xa1, 0x8d, 0xa8, 0x30, 0x06, 0x90, 0x95, 0x85, 0x81, 0x94, 0xc6, 0xf0, 0xfc, 0x07, 0xff, 0x0b, 0xff, 0x88, 0x3f, 0x4f, 0x50, 0x85, 0x52,
            0x20, 0x4f, 0x3f, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0xfc, 0xf2, 0x0a, 0x51, 0xa2, 0x04, 0xf2, 0xfc, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0x3f, 0x0f, 0x90, 0x05, 0x92, 0x20, 0x8f, 0x3f, 0x0b,
            0xff, 0x0b, 0xff, 0x88, 0xfc, 0xf1, 0x08, 0x51, 0xa0, 0x05, 0xf0, 0xfc, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0x3f, 0xbf, 0x00, 0x95, 0x22, 0x00, 0xbf, 0x3f, 0x0b, 0xff, 0x0b, 0xff, 0x88,
            0xfc, 0xfd, 0x00, 0x51, 0xa4, 0x00, 0xfd, 0xfc, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0x3f, 0xbf, 0x30, 0x85, 0x02, 0x30, 0xbf, 0x3f, 0x0b, 0xff, 0x0b, 0xff, 0x88, 0xfc, 0xfd, 0x0c, 0x41,
            0xa0, 0x0c, 0xfd, 0xfc, 0x0b, 0xff, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x01, 0x11, 0x02, 0x83, 0x01, 0x09, 0x80, 0x11, 0x81, 0x04, 0x01, 0x05, 0x84, 0x02, 0x06, 0x85, 0x03, 0x07, 0x86, 0x04, 0x08, 0x87, 0x05, 0x89,
            0x88, 0x12, 0x82, 0x0a, 0x02, 0x0b, 0x82, 0x03, 0x0c, 0x8a, 0x04, 0x0d, 0x8b, 0x05, 0x8d, 0x8c, 0x11, 0x0f, 0x90, 0x01, 0x10, 0x8e, 0x02, 0x11, 0x8f, 0x03, 0x12, 0x91, 0x04, 0x13,
            0x92, 0x05, 0x94, 0x93, 0x11, 0x15, 0x98, 0x12, 0x16, 0x99, 0x02, 0x17, 0x18, 0x13, 0x96, 0x1b, 0x13, 0x19, 0x9a, 0x03, 0x1a, 0x95, 0x14, 0x97, 0x1e, 0x03, 0x1c, 0x9b, 0x04, 0x1d,
            0x9c, 0x05, 0x9e, 0x9d, 0x04, 0x1f, 0x97, 0x05, 0xa0, 0x9f, 0x11, 0x21, 0xa4, 0x12, 0x22, 0xa5, 0x02, 0x23, 0x28, 0x13, 0x24, 0xa6, 0x14, 0x25, 0xa7, 0x15, 0x26, 0x27, 0x04, 0xa2,
            0xa1, 0x04, 0x32, 0xaa, 0x13, 0x29, 0xa6, 0x03, 0x2a, 0x2c, 0x14, 0x2b, 0x30, 0x15, 0x33, 0xab, 0x14, 0x2d, 0xa7, 0x04, 0x2e, 0x2f, 0x15, 0xa2, 0x32, 0x15, 0xa1, 0xaa, 0x04, 0x31,
            0xa7, 0x05, 0xa9, 0xa8, 0x05, 0xad, 0xac, 0x05, 0xa1, 0xa3, 0x06, 0x22, 0x06, 0xec, 0x06, 0x22, 0x06, 0x22, 0x06, 0xec, 0x08, 0xc2, 0x08, 0xfa, 0x09, 0x2a, 0x09, 0x4c, 0x09, 0x59,
            0x06, 0x22, 0x06, 0x22, 0x06, 0x22, 0x06, 0x22, 0x06, 0x43, 0x07, 0x2e, 0x07, 0xfc, 0x09, 0x64, 0x09, 0x98, 0x09, 0xc6, 0x09, 0xf4, 0x06, 0x64, 0x07, 0x70, 0x07, 0x9c, 0x08, 0x1d,
            0x0a, 0x24, 0x0a, 0x84, 0x0a, 0xd4, 0x0b, 0x00, 0x0b, 0x2c, 0x0b, 0x58, 0x0b, 0x9e, 0x0b, 0xe4, 0x06, 0x7a, 0x07, 0xe2, 0x07, 0xb2, 0x08, 0x3e, 0x0a, 0x3c, 0x0a, 0x9a, 0x0b, 0x84,
            0x0b, 0xb4, 0x0b, 0xfa, 0x0c, 0x2a, 0x0c, 0x44, 0x0c, 0x5e, 0x0c, 0x78, 0x06, 0xcb, 0x07, 0x0d, 0x06, 0xcb, 0x06, 0xcb, 0x07, 0x0d, 0x08, 0xde, 0x09, 0x12, 0x09, 0x3b, 0x09, 0x4c,
            0x09, 0x59, 0x06, 0xcb, 0x06, 0xcb, 0x06, 0xcb, 0x06, 0xcb, 0x06, 0xaa, 0x07, 0x4f, 0x08, 0xa1, 0x09, 0x7e, 0x09, 0xaf, 0x09, 0xdd, 0x0a, 0x0c, 0x06, 0x94, 0x07, 0x86, 0x07, 0xcc,
            0x08, 0x80, 0x0a, 0x6c, 0x0a, 0xbe, 0x0a, 0xea, 0x0b, 0x16, 0x0b, 0x42, 0x0b, 0x6e, 0x0b, 0xce, 0x0c, 0x14, 0x06, 0x87, 0x07, 0xef, 0x07, 0xbf, 0x08, 0x5f, 0x0a, 0x54, 0x0a, 0xac,
            0x0b, 0x91, 0x0b, 0xc1, 0x0c, 0x07, 0x0c, 0x37, 0x0c, 0x51, 0x0c, 0x6b, 0x0c, 0x85
        )
    },
    {
        "name": "Random pixels test",
        "type": SCHIP,
        "keys": {},
        "rom": (
            0x00, 0xff, 0xc0, 0x7f, 0xc1, 0x3f, 0xa2, 0x0c, 0xd0, 0x11, 0x12, 0x02, 0x80
        )
    },
    {
        "name": "Corax test",
        "type": VIP,
        "keys": {},
        "rom": (
            0x12, 0x4e, 0xea, 0xac, 0xaa, 0xea, 0xce, 0xaa, 0xaa, 0xae, 0xe0, 0xa0, 0xa0, 0xe0, 0xc0, 0x40,
            0x40, 0xe0, 0xe0, 0x20, 0xc0, 0xe0, 0xe0, 0x60, 0x20, 0xe0, 0xa0, 0xe0, 0x20, 0x20, 0x60, 0x40,
            0x20, 0x40, 0xe0, 0x80, 0xe0, 0xe0, 0xe0, 0x20, 0x20, 0x20, 0xe0, 0xe0, 0xa0, 0xe0, 0xe0, 0xe0,
            0x20, 0xe0, 0x40, 0xa0, 0xe0, 0xa0, 0xe0, 0xc0, 0x80, 0xe0, 0xe0, 0x80, 0xc0, 0x80, 0xa0, 0x40,
            0xa0, 0xa0, 0xa2, 0x02, 0xda, 0xb4, 0x00, 0xee, 0xa2, 0x02, 0xda, 0xb4, 0x13, 0xdc, 0x68, 0x01,
            0x69, 0x05, 0x6a, 0x0a, 0x6b, 0x01, 0x65, 0x2a, 0x66, 0x2b, 0xa2, 0x16, 0xd8, 0xb4, 0xa2, 0x3e,
            0xd9, 0xb4, 0xa2, 0x02, 0x36, 0x2b, 0xa2, 0x06, 0xda, 0xb4, 0x6b, 0x06, 0xa2, 0x1a, 0xd8, 0xb4,
            0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x45, 0x2a, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x0b, 0xa2, 0x1e,
            0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x55, 0x60, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x10,
            0xa2, 0x26, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x76, 0xff, 0x46, 0x2a, 0xa2, 0x02,
            0xda, 0xb4, 0x6b, 0x15, 0xa2, 0x2e, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0xa2, 0x06, 0x95, 0x60,
            0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x1a, 0xa2, 0x32, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0x22, 0x42,
            0x68, 0x17, 0x69, 0x1b, 0x6a, 0x20, 0x6b, 0x01, 0xa2, 0x0a, 0xd8, 0xb4, 0xa2, 0x36, 0xd9, 0xb4,
            0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x06, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x0a, 0xd9, 0xb4, 0xa2, 0x06,
            0x87, 0x50, 0x47, 0x2a, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x0b, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x0e,
            0xd9, 0xb4, 0xa2, 0x06, 0x67, 0x2a, 0x87, 0xb1, 0x47, 0x2b, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x10,
            0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x12, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x78, 0x67, 0x1f, 0x87, 0x62,
            0x47, 0x18, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x15, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x16, 0xd9, 0xb4,
            0xa2, 0x06, 0x66, 0x78, 0x67, 0x1f, 0x87, 0x63, 0x47, 0x67, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x1a,
            0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x1a, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x8c, 0x67, 0x8c, 0x87, 0x64,
            0x47, 0x18, 0xa2, 0x02, 0xda, 0xb4, 0x68, 0x2c, 0x69, 0x30, 0x6a, 0x34, 0x6b, 0x01, 0xa2, 0x2a,
            0xd8, 0xb4, 0xa2, 0x1e, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x8c, 0x67, 0x78, 0x87, 0x65, 0x47, 0xec,
            0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x06, 0xa2, 0x2a, 0xd8, 0xb4, 0xa2, 0x22, 0xd9, 0xb4, 0xa2, 0x06,
            0x66, 0xe0, 0x86, 0x6e, 0x46, 0xc0, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x0b, 0xa2, 0x2a, 0xd8, 0xb4,
            0xa2, 0x36, 0xd9, 0xb4, 0xa2, 0x06, 0x66, 0x0f, 0x86, 0x66, 0x46, 0x07, 0xa2, 0x02, 0xda, 0xb4,
            0x6b, 0x10, 0xa2, 0x3a, 0xd8, 0xb4, 0xa2, 0x1e, 0xd9, 0xb4, 0xa3, 0xe8, 0x60, 0x00, 0x61, 0x30,
            0xf1, 0x55, 0xa3, 0xe9, 0xf0, 0x65, 0xa2, 0x06, 0x40, 0x30, 0xa2, 0x02, 0xda, 0xb4, 0x6b, 0x15,
            0xa2, 0x3a, 0xd8, 0xb4, 0xa2, 0x16, 0xd9, 0xb4, 0xa3, 0xe8, 0x66, 0x89, 0xf6, 0x33, 0xf2, 0x65,
            0xa2, 0x02, 0x30, 0x01, 0xa2, 0x06, 0x31, 0x03, 0xa2, 0x06, 0x32, 0x07, 0xa2, 0x06, 0xda, 0xb4,
            0x6b, 0x1a, 0xa2, 0x0e, 0xd8, 0xb4, 0xa2, 0x3e, 0xd9, 0xb4, 0x12, 0x48, 0x13, 0xdc,
        )
    }
)

class Menu:
    def __init__(self):
        self.selected = 0
        self.scroll = 0

    def choose(self, programs):
        self.programs = programs
        while True:
            self.animate = 0
            self.render()
            self.lastInputTime = time.ticks_ms()
            self.lastAnimateTime = time.ticks_ms()
            if self.waitInput():
                return self.programs[self.selected]

    def waitInput(self):
        # Wait for button release
        while thumby.buttonU.pressed() or thumby.buttonD.pressed() or thumby.buttonA.pressed() or thumby.buttonB.pressed():
            pass
        # Wait for button press
        while True:
            if thumby.buttonU.pressed() and self.selected > 0:
                self.selected -= 1
                if self.selected < self.scroll:
                    self.scroll -= 1
                return False
            if thumby.buttonD.pressed() and self.selected < len(self.programs)-1:
                self.selected += 1
                self.scroll = max(0, self.selected - 3)
                return False
            if thumby.buttonA.pressed() or thumby.buttonB.pressed():
                return True

            # Wait for animation to start
            now = time.ticks_ms()
            if now - self.lastInputTime > 300 and now - self.lastAnimateTime > 20:
                nameLength = len(self.programs[self.selected]["name"])
                if nameLength > 9:
                    if self.animate > nameLength * 10:
                        self.animate = 0
                    else:
                        self.animate += 1
                    self.lastAnimateTime = now
                    self.render()

    def printline(self, string, highlight = False):
        if highlight:
            thumby.display.fillRect(0, self.row, thumby.DISPLAY_W, 8, 1)
            thumby.display.drawText(string, 0 - self.animate, self.row, 0)
            thumby.display.drawText(string, len(string) * 10 - self.animate + 1, self.row, 0)
        else:
            thumby.display.drawText(string, 0, self.row)
        self.row += 9

    def render(self):
        thumby.display.fill(0)
        self.row = 0
        for i in range(self.scroll, len(self.programs)):
            self.printline(self.programs[i]["name"], self.selected == i)
        thumby.display.update()

# Font definitions for the interpreter built in fonts

chip8Font = (
    0b11110000, 0b10010000, 0b10010000, 0b10010000, 0b11110000,
    0b01100000, 0b00100000, 0b00100000, 0b00100000, 0b01110000,
    0b11110000, 0b00010000, 0b11110000, 0b10000000, 0b11110000,
    0b11110000, 0b00010000, 0b01110000, 0b00010000, 0b11110000,
    0b10100000, 0b10100000, 0b11110000, 0b00100000, 0b00100000,
    0b11110000, 0b10000000, 0b11110000, 0b00010000, 0b11110000,
    0b11110000, 0b10000000, 0b11110000, 0b10010000, 0b11110000,
    0b11110000, 0b00010000, 0b00010000, 0b00010000, 0b00010000,
    0b11110000, 0b10010000, 0b11110000, 0b10010000, 0b11110000,
    0b11110000, 0b10010000, 0b11110000, 0b00010000, 0b11110000,
    0b11110000, 0b10010000, 0b11110000, 0b10010000, 0b10010000,
    0b11110000, 0b01010000, 0b01110000, 0b01010000, 0b11110000,
    0b11110000, 0b10000000, 0b10000000, 0b10000000, 0b11110000,
    0b11110000, 0b01010000, 0b01010000, 0b01010000, 0b11110000,
    0b11110000, 0b10000000, 0b11110000, 0b10000000, 0b11110000,
    0b11110000, 0b10000000, 0b11110000, 0b10000000, 0b10000000,

    0b00111100, 0b01111110, 0b11100111, 0b11000011, 0b11000011, 0b11000011, 0b11000011, 0b11100111, 0b01111110, 0b00111100,
    0b00011000, 0b00111000, 0b01011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00111100,
    0b00111110, 0b01111111, 0b11000011, 0b00000110, 0b00001100, 0b00011000, 0b00110000, 0b01100000, 0b11111111, 0b11111111,
    0b00111100, 0b01111110, 0b11000011, 0b00000011, 0b00001110, 0b00001110, 0b00000011, 0b11000011, 0b01111110, 0b00111100,
    0b00000110, 0b00001110, 0b00011110, 0b00110110, 0b01100110, 0b11000110, 0b11111111, 0b11111111, 0b00000110, 0b00000110,
    0b11111111, 0b11111111, 0b11000000, 0b11000000, 0b11111100, 0b11111110, 0b00000011, 0b11000011, 0b01111110, 0b00111100,
    0b00111110, 0b01111100, 0b11100000, 0b11000000, 0b11111100, 0b11111110, 0b11000011, 0b11000011, 0b01111110, 0b00111100,
    0b11111111, 0b11111111, 0b00000011, 0b00000110, 0b00001100, 0b00011000, 0b00110000, 0b01100000, 0b01100000, 0b01100000,
    0b00111100, 0b01111110, 0b11000011, 0b11000011, 0b01111110, 0b01111110, 0b11000011, 0b11000011, 0b01111110, 0b00111100,
    0b00111100, 0b01111110, 0b11000011, 0b11000011, 0b01111111, 0b00111111, 0b00000011, 0b00000011, 0b00111110, 0b01111100,
)

schipFont = (
    0b11110000, 0b10010000, 0b10010000, 0b10010000, 0b11110000,
    0b00100000, 0b01100000, 0b00100000, 0b00100000, 0b01110000,
    0b11110000, 0b00010000, 0b11110000, 0b10000000, 0b11110000,
    0b11110000, 0b00010000, 0b01110000, 0b00010000, 0b11110000,
    0b10010000, 0b10010000, 0b11110000, 0b00010000, 0b00010000,
    0b11110000, 0b10000000, 0b11110000, 0b00010000, 0b11110000,
    0b11110000, 0b10000000, 0b11110000, 0b10010000, 0b11110000,
    0b11110000, 0b00010000, 0b00100000, 0b01000000, 0b01000000,
    0b11110000, 0b10010000, 0b11110000, 0b10010000, 0b11110000,
    0b11110000, 0b10010000, 0b11110000, 0b00010000, 0b11110000,
    0b11110000, 0b10010000, 0b11110000, 0b10010000, 0b10010000,
    0b11100000, 0b10010000, 0b11100000, 0b10010000, 0b11100000,
    0b11110000, 0b10000000, 0b10000000, 0b10000000, 0b11110000,
    0b11100000, 0b10010000, 0b10010000, 0b10010000, 0b11100000,
    0b11110000, 0b10000000, 0b11110000, 0b10000000, 0b11110000,
    0b11110000, 0b10000000, 0b11110000, 0b10000000, 0b10000000,

    0b00111100, 0b01111110, 0b11100111, 0b11000011, 0b11000011, 0b11000011, 0b11000011, 0b11100111, 0b01111110, 0b00111100,
    0b00011000, 0b00111000, 0b01011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00011000, 0b00111100,
    0b00111110, 0b01111111, 0b11000011, 0b00000110, 0b00001100, 0b00011000, 0b00110000, 0b01100000, 0b11111111, 0b11111111,
    0b00111100, 0b01111110, 0b11000011, 0b00000011, 0b00001110, 0b00001110, 0b00000011, 0b11000011, 0b01111110, 0b00111100,
    0b00000110, 0b00001110, 0b00011110, 0b00110110, 0b01100110, 0b11000110, 0b11111111, 0b11111111, 0b00000110, 0b00000110,
    0b11111111, 0b11111111, 0b11000000, 0b11000000, 0b11111100, 0b11111110, 0b00000011, 0b11000011, 0b01111110, 0b00111100,
    0b00111110, 0b01111100, 0b11100000, 0b11000000, 0b11111100, 0b11111110, 0b11000011, 0b11000011, 0b01111110, 0b00111100,
    0b11111111, 0b11111111, 0b00000011, 0b00000110, 0b00001100, 0b00011000, 0b00110000, 0b01100000, 0b01100000, 0b01100000,
    0b00111100, 0b01111110, 0b11000011, 0b11000011, 0b01111110, 0b01111110, 0b11000011, 0b11000011, 0b01111110, 0b00111100,
    0b00111100, 0b01111110, 0b11000011, 0b11000011, 0b01111111, 0b00111111, 0b00000011, 0b00000011, 0b00111110, 0b01111100,
)

VIP_SCHIP_RAM_SIZE = 3583 + 512
XOCHIP_RAM_SIZE    = 65023 + 512
DEFAULT_STACK_SIZE = 12
SCHIP_STACK_SIZE   = 16  # According to http://devernay.free.fr/hacks/chip8/schip.txt: "Subroutine nesting is limited to 16 levels"

def playSound(playingPattern, pattern, pitch):
    # TODO
    return

def stopSound():
    thumby.audio.stop()

# Render Silicon8 planeBuffer to Thumby display as best as you can
def render(dispWidth, dispHeight, planeBuffer):
    if dispWidth <= thumby.DISPLAY_W:
        minX = 0
        maxX = dispWidth
        screenX = int((thumby.DISPLAY_W - dispWidth) / 2)
    else:
        minX = int((dispWidth - thumby.DISPLAY_W) / 2)
        maxX = int(dispWidth - (dispWidth - thumby.DISPLAY_W) / 2)
        screenX = 0

    if dispHeight <= thumby.DISPLAY_H:
        minY = 0
        maxY = dispHeight
        screenY = int((thumby.DISPLAY_H - dispHeight) / 2)
    else:
        minY = int((dispHeight - thumby.DISPLAY_H) / 2)
        maxY = int(dispHeight - (dispHeight - thumby.DISPLAY_H) / 2)
        screenY = 0

    bitmask = 128
    pointer = 0
    display = bytearray(9*40)   # 72 / 8 * 40
    for y in range(minY, maxY, 8):
        for x in range(minX, maxX):
            for row in range(7, -1, -1):
                pixel = planeBuffer[(y + row) * dispWidth + x] # & 1
                if pixel > 0:
                    # Set pixel
                    display[pointer] = display[pointer] | bitmask
                else:
                    # Reset pixel
                    display[pointer] = display[pointer] & (bitmask ^ 0xFF)
                bitmask = bitmask >> 1
                if bitmask == 0:
                    bitmask = 128
                    pointer += 1

    thumby.display.blit(display, screenX, screenY,
        min(dispWidth, thumby.DISPLAY_W), min(dispHeight, thumby.DISPLAY_H))
    thumby.display.update()

# Get an array of keys that maps Thumby keys to CHIP-8 keys
def getKeys():
    keyboard = bytearray(16)
    if "up" in keymap:
        keyboard[keymap["up"]]    |= thumby.buttonU.pressed()
    if "down" in keymap:
        keyboard[keymap["down"]]  |= thumby.buttonD.pressed()
    if "left" in keymap:
        keyboard[keymap["left"]]  |= thumby.buttonL.pressed()
    if "right" in keymap:
        keyboard[keymap["right"]] |= thumby.buttonR.pressed()
    if "a" in keymap:
        keyboard[keymap["a"]]     |= thumby.buttonA.pressed()
    if "b" in keymap:
        keyboard[keymap["b"]]     |= thumby.buttonB.pressed()
    return keyboard

# Main Silicon8 class that holds the virtual CPU
# Pretty much a direct port of https://github.com/Timendus/silicon8 to MicroPython
class Silicon8:
    def __init__(self):
        # CHIP-8 interpreter state that isn't initialized elsewhere
        self.stop()
        self.v = bytearray(16)
        self.i = 0
        self.userFlags = bytearray(16)

    def start(self):
    	self.running = True

    def stop(self):
    	self.running = False

    def clockTick(self, t):
        if not self.running:
            return

        # Tick timers
        if self.dt > 0:
        	self.dt -= 1

        if self.st > 0:
        	if not self.playing:
        		self.playing = True
        		playSound(self.playingPattern, self.pattern, self.pitch)
        		self.audioDirty = False
        	self.st -= 1
        else:
        	if self.playing:
        		self.playing = False
        		self.audioDirty = False
        		stopSound()

        # Trigger audio updates if dirty
        if self.audioDirty:
        	playSound(self.playingPattern, self.pattern, self.pitch)
        	self.audioDirty = False

        # Render display if dirty
        if self.SD:
        	render(self.DispWidth, self.DispHeight, self.planeBuffer)
        	self.SD = False

        # Register display redraw interrupt for dispQuirk
        if self.WaitForInt == 1:
        	self.WaitForInt = 2

    def run(self, program):
        for i in range(0, len(program)):
            self.ram[i + 0x200] = program[i]
        while True:
            self.cycle()

    def reset(self, interpreter):
        self.stop()

        if interpreter != AUTO:
            self.specType = interpreter
            self.typeFixed = True
        else:
            self.specType = VIP
            self.typeFixed = False

        if interpreter == VIP:
        	self.RAMSize = VIP_SCHIP_RAM_SIZE
    		self.stackSize = DEFAULT_STACK_SIZE
    	elif interpreter == SCHIP:
    		self.RAMSize = VIP_SCHIP_RAM_SIZE
    		self.stackSize = SCHIP_STACK_SIZE
    	elif interpreter == XOCHIP:
    		self.RAMSize = XOCHIP_RAM_SIZE
    		self.stackSize = DEFAULT_STACK_SIZE
    	elif interpreter == AUTO: # Takes maximum sizes, determines limits at runtime
    		self.RAMSize = XOCHIP_RAM_SIZE
    		self.stackSize = SCHIP_STACK_SIZE

        # Initialize registers
        self.pc = 0x200
        self.sp = self.stackSize - 1
        self.dt = 0
        self.st = 0

        # Initialize XO-Chip audio "registers"
        self.pattern = [0] * 16
        self.pitch = 4000
        self.playingPattern = False
        self.audioDirty = False

        # Initialize memory
        self.initDisplay(64, 32, 1)
        self.stack = [0] * self.stackSize
        self.planeBuffer = bytearray(128*64)
        self.ram = bytearray(self.RAMSize)

        # Initialize internal variables
        self.waitForKey = False
        self.WaitForInt = 0
        self.playing = False
        self.SD = True
        self.running = True
        self.plane = 1
        self.planes = 1
        self.cyclesPerFrame = 30

        # Determine quirks to use
        self.setQuirks()

        # Load the appropriate font
        self.loadFont()

        self.start()

    def setQuirks(self):
        self.shiftQuirk = self.specType == SCHIP
        self.jumpQuirk = self.specType == SCHIP
        self.memQuirk = self.specType != SCHIP
        self.vfQuirk = self.specType == VIP
        self.clipQuirk = self.specType != XOCHIP
        self.dispQuirk = self.specType == VIP

    def bumpSpecType(self, newType):
        if self.typeFixed:
            return
        if newType > self.specType:
            self.specType = newType
            self.setQuirks()
            if newType == SCHIP:
                print("Auto-upgraded interpreter to SCHIP")
            elif newType == XOCHIP:
                print("Auto-upgraded interpreter to XOCHIP")

    # Run the CPU for one cycle and return control
    def cycle(self):
        if not self.running:
            return

        op  = self.ram[self.a(self.pc)]<<8 | self.ram[self.a(self.pc+1)]
        x   = self.ram[self.a(self.pc)] & 0x0F
        y   = (self.ram[self.a(self.pc+1)] & 0xF0) >> 4
        n   = self.ram[self.a(self.pc+1)] & 0x0F
        nn  = self.ram[self.a(self.pc+1)] & 0xFF
        nnn = x<<8 | nn

        self.pc += 2

        check = op & 0xF000
        if check == 0:
            self.machineCall(op, n)
        elif check == 0x1000:
            # Jump
            self.pc = nnn
        elif check == 0x2000:
            # Call
            self.stack[self.s(self.sp)] = self.pc
            self.sp -= 1
            self.pc = nnn
        elif check == 0x3000:
            if self.v[x] == nn:
                self.skipNextInstruction()
        elif check == 0x4000:
            if self.v[x] != nn:
                self.skipNextInstruction()
        elif check == 0x5000:
            if x > y:
                n = x
                x = y
                y = n

            if n == 2:
                # Store range of registers to memory
                for i in range(x, y + 1):
                    self.ram[self.a(self.i+(i-x))] = self.v[i]
                self.bumpSpecType(XOCHIP)
            elif n == 3:
                # Load range of registers from memory
                for i in range(x, y + 1):
                    self.v[i] = self.ram[self.a(self.i+(i-x))]
                self.bumpSpecType(XOCHIP)
            else:
                if self.v[x] == self.v[y]:
                    self.skipNextInstruction()
        elif check == 0x6000:
            # Set register
            self.v[x] = nn
        elif check == 0x7000:
            # Add to register
            self.v[x] += nn
        elif check == 0x8000:
            self.maths(x, y, n)
        elif check == 0x9000:
            if self.v[x] != self.v[y]:
                self.skipNextInstruction()
        elif check == 0xA000:
            # Set i
            self.i = nnn
        elif check == 0xB000:
            # Jump to i + "v0"
            if self.jumpQuirk:
                self.pc = nnn + self.v[x]
            else:
                self.pc = nnn + self.v[0]
        elif check == 0xC000:
            # Set register to random number
            self.v[x] = random.randint(0, 255) & nn
        elif check == 0xD000:
            self.draw(x, y, n)
        elif check == 0xE000:
            if nn == 0x9E:
                if getKeys()[self.v[x]]:
                    self.skipNextInstruction()
            elif nn == 0xA1:
                if not getKeys()[self.v[x]]:
                    self.skipNextInstruction()
        elif check == 0xF000:
            if nn == 0x00:
                # Set i register to 16-bit value
                self.i = self.ram[self.a(self.pc)]<<8 | self.ram[self.a(self.pc+1)]
                self.pc += 2
                self.bumpSpecType(XOCHIP)
            elif nn == 0x01:
                # Enable the second plane if it hasn't been enabled yet
                if self.planes == 1:
                    self.initDisplay(self.DispWidth, self.DispHeight, 2)
                # Select plane X
                self.plane = x
                self.bumpSpecType(XOCHIP)
            elif nn == 0x02:
                # XO-Chip: Load 16 bytes of audio buffer from (i)
                for i in range(0, 16):
                    self.pattern[i] = self.ram[self.a(self.i+i)]
                self.playingPattern = True
                self.audioDirty = True
                self.bumpSpecType(XOCHIP)
            elif nn == 0x07:
                # Set register to value of delay timer
    			self.v[x] = self.dt
            elif nn == 0x0A:
                # Wait for keypress and return key in vX
                if cpu.waitForKey:
                    keyboard = getKeys()
                    for i in range(len(keyboard)):
                        if keyboard[i]:
                            self.v[x] = i
                            self.waitForKey = False
                            return
                    self.pc -= 2
                else:
                    self.pc -= 2
                    keyboard = getKeys()
                    for i in range(len(keyboard)):
                        if keyboard[i]:
                            return
                    self.waitForKey = True
            elif nn == 0x15:
                # Set delay timer to value in vX
                self.dt = self.v[x]
            elif nn == 0x18:
                # Set sound timer to value in vX
                self.st = self.v[x]
            elif nn == 0x1E:
                # Add vX to i register
                self.i += self.v[x] & 0xFFFF
            elif nn == 0x29:
                # Set i register to font data
                self.i = self.v[x] * 5
            elif nn == 0x30:
                # Set i register to large font data
                self.i = self.v[x]*10 + 80
                self.bumpSpecType(SCHIP)
            elif nn == 0x33:
                # Binary coded decimal from vX to address in i
                self.ram[self.a(self.i+0)] = int(self.v[x] / 100)
                self.ram[self.a(self.i+1)] = int(self.v[x] % 100 / 10)
                self.ram[self.a(self.i+2)] = self.v[x] % 10
            elif nn == 0x3A:
                # XO-Chip: Change pitch of audio pattern
                self.pitch = 4000 * pow(2, (self.v[x]-64)/48)
                self.playingPattern = True
                self.audioDirty = True
                self.bumpSpecType(XOCHIP)
            elif nn == 0x55:
                # Store registers to memory (regular VIP/SCHIP)
                for i in range(0, x + 1):
                    self.ram[self.a(self.i + i)] = self.v[i]
                if self.memQuirk:
                    self.i = (self.i + x + 1) & 0xFFFF
            elif nn == 0x65:
                # Load registers from memory (regular VIP/SCHIP)
                for i in range(0, x + 1):
                    self.v[i] = self.ram[self.a(self.i + i)]
                if self.memQuirk:
                    self.i = (self.i + x + 1) & 0xFFFF
            elif nn == 0x75:
                # Store registers to "user flags" (SCHIP)
                for i in range(0, x + 1):
                    self.userFlags[i] = self.v[i]
                self.bumpSpecType(SCHIP)
            elif nn == 0x85:
                # Load registers from "user flags" (SCHIP)
                for i in range(0, x + 1):
                    self.v[i] = self.userFlags[i]
                self.bumpSpecType(SCHIP)

    def machineCall(self, op, n):
        check = op & 0xFFF0
    	if check == 0x00C0:
            # TODO
    		# self.scrollDown(n)
    		self.bumpSpecType(SCHIP)
    		return
    	elif check == 0x00D0:
            # TODO
    		# self.scrollUp(n)
    		self.bumpSpecType(XOCHIP)
    		return

        if op == 0x00E0:
            # Clear screen
            self.clearScreen()
        elif op == 0x00EE:
            # Return
            self.sp += 1
            self.pc = self.stack[self.s(self.sp)]
        elif op == 0x00FB:
            # TODO
    		# self.scrollRight()
    		self.bumpSpecType(SCHIP)
    	elif op == 0x00FC:
            # TODO
    		# self.scrollLeft()
    		self.bumpSpecType(SCHIP)
    	elif op == 0x00FD:
    		# "Exit" interpreter. Will just halt in our implementation
    		self.running = false
    		self.bumpSpecType(SCHIP)
    	elif op == 0x00FE:
    		# Set normal screen resolution
    		self.initDisplay(64, 32, self.planes)
    		self.clearPlanes(0)
    		self.bumpSpecType(SCHIP)
    	elif op == 0x00FF:
    		# Set extended screen resolution
    		self.initDisplay(128, 64, self.planes)
    		self.clearPlanes(0)
    		self.bumpSpecType(SCHIP)
    	else:
            print("RCA 1802 assembly calls not supported at address", self.pc-2, "opcode", op)
            self.running = false

    def maths(self, x, y, n):
    	if n == 0x0:
    		self.v[x] = self.v[y]
    	elif n == 0x1:
    		self.v[x] |= self.v[y]
    		if self.vfQuirk:
    			self.v[0xF] = 0
    	elif n == 0x2:
    		self.v[x] &= self.v[y]
    		if self.vfQuirk:
    			self.v[0xF] = 0
    	elif n == 0x3:
    		self.v[x] ^= self.v[y]
    		if self.vfQuirk:
    			self.v[0xF] = 0
    	elif n == 0x4:
    		# Add register vY to vX
    		# Set VF to 01 if a carry occurs
    		# Set VF to 00 if a carry does not occur
    		flag = (0xFF - self.v[x]) < self.v[y]
    		self.v[x] += self.v[y]
    		self.setFlag(flag)
    	elif n == 0x5:
    		# Subtract register vY from vX and store in vX
    		# Set VF to 00 if a borrow occurs
    		# Set VF to 01 if a borrow does not occur
    		flag = self.v[x] >= self.v[y]
    		self.v[x] -= self.v[y]
    		self.setFlag(flag)
    	elif n == 0x6:
    		# Shift right
    		if self.shiftQuirk:
    			y = x
    		# Set register VF to the least significant bit prior to the shift
    		flag = self.v[y]&0b00000001 > 0
    		self.v[x] = self.v[y] >> 1
    		self.setFlag(flag)
    	elif n == 0x7:
    		# Subtract register vX from vY and store in vX
    		# Set VF to 00 if a borrow occurs
    		# Set VF to 01 if a borrow does not occur
    		flag = self.v[y] >= self.v[x]
    		self.v[x] = self.v[y] - self.v[x]
    		self.setFlag(flag)
    	elif n == 0xE:
    		# Shift left
    		if self.shiftQuirk:
    			y = x
    		# Set register VF to the most significant bit prior to the shift
    		flag = self.v[y]&0b10000000 > 0
    		self.v[x] = self.v[y] << 1
    		self.setFlag(flag)

    def skipNextInstruction(self):
        nextInstruction = self.ram[self.a(self.pc)]<<8 | self.ram[self.a(self.pc+1)]
    	if nextInstruction == 0xF000:
            self.pc += 4
        else:
            self.pc += 2

    def a(self, address):
        if address >= self.RAMSize:
            print("Program attempted to access RAM outsize of memory")
            return 0
        if address >= VIP_SCHIP_RAM_SIZE:
            self.bumpSpecType(XOCHIP)
        return address

    def s(self, address):
        if address >= self.stackSize:
            print("Program attempted to access invalid stack memory")
            return 0
        if self.stackSize == SCHIP_STACK_SIZE and address < (SCHIP_STACK_SIZE-DEFAULT_STACK_SIZE):
            self.bumpSpecType(SCHIP)
        return address

    def setFlag(self, comparison):
        self.v[0xF] = 0
        if comparison:
            self.v[0xF] = 1

    # Display magic

    def clearScreen(self):
        self.clearPlanes(self.plane ^ 0xFF)

    def clearPlanes(self, planes):
        for i in range(len(self.planeBuffer)):
            self.planeBuffer[i] = self.planeBuffer[i] & planes
        self.SD = True

    # TODO: scroll instructions

    def draw(self, x, y, n):
        if self.waitForInterrupt():
            return

    	# Get real sprite position & height
    	xPos = self.v[x]
    	yPos = self.v[y]
    	while xPos >= self.DispWidth:
    		xPos -= self.DispWidth
    	while yPos >= self.DispHeight:
    		yPos -= self.DispHeight
        height = n
        if height == 0:
            height = 16

        # Do the actual drawing
        erases = False
        ramPointer = self.i
        plane = 1

        while plane < 4:                     # Go through two planes
            if (plane & self.plane) != 0:    # If this plane is currently selected
                planeBufPointer = yPos*self.DispWidth + xPos
                for i in range(0, height):   # Draw N lines
                    # Does this line fall off the bottom of the screen?
                    if planeBufPointer > self.DispWidth * self.DispHeight:
                        if self.clipQuirk:
                            continue
                        else:
                            planeBufPointer -= self.DispWidth * self.DispHeight
                    lineErases = self.drawLine(ramPointer, planeBufPointer, plane)
                    erases = erases or lineErases
                    ramPointer += 1
                    if n == 0:
                      lineErases = self.drawLine(ramPointer, planeBufPointer+8, plane)
                      erases = erases or lineErases
                      ramPointer += 1
                    planeBufPointer += self.DispWidth
            plane = plane << 1

        self.SD = True
        self.setFlag(erases)
        if n == 0:
        	self.bumpSpecType(SCHIP)

    def waitForInterrupt(self):
        if not self.dispQuirk:
            return False

        if self.WaitForInt == 0:
            self.WaitForInt = 1
            self.pc -= 2
            return True
        elif self.WaitForInt == 1:
            self.pc -= 2
            return True
        else:
            self.WaitForInt = 0
            return False

    def drawLine(self, ramPointer, planeBufPointer, plane):
        pixels = self.ram[self.a(ramPointer)]
        erases = False
        bit = 128
        while bit > 0:
            if (pixels & bit) != 0:
                erases = erases or ((self.planeBuffer[planeBufPointer]&plane) != 0)
                self.planeBuffer[planeBufPointer] ^= plane
            planeBufPointer += 1
            # Did we cross the edge of the screen?
            if (planeBufPointer % self.DispWidth) == 0:
                if self.clipQuirk:
                    break
                else:
                    planeBufPointer -= self.DispWidth
            bit = bit >> 1
        return erases

    def initDisplay(self, width, height, planes):
        self.DispWidth = width
        self.DispHeight = height
        self.planes = planes

    def loadFont(self):
        if self.specType == SCHIP or self.specType == XOCHIP:
            font = schipFont
        else:
            font = chip8Font

        for i in range(len(font)):
            self.ram[i] = font[i];

# Actual program start:

time.sleep_ms(1000)
program = Menu().choose(programs)

# Instantiate interpreter
cpu = Silicon8()

# Set up 60Hz interrupt handler
timer = machine.Timer()
timer.init(mode=timer.PERIODIC, period=17, callback=cpu.clockTick)

# Start the interpreter
keymap = program["keys"]
cpu.reset(program["type"])
thumby.display.fill(0)
thumby.display.update()
cpu.run(program["rom"])
